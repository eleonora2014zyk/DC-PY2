импортировать доктест


класс Животное:
    slovar_pishi = {'Травоядное': ["трава"], 'Плотоядное': ['мясо'], 'Всеядное': ['мясо, трава']}

    def __init__(я, статус: логическое значение, королевство: ул, имя: ул, еда_категория: ул):
        """
        Подготовка и создание объекта 'Животное'
        :param status: Можно ли приручить животное
        :param Kingdom: К какому царству относится
        :param name: Название животного
        :param food_category: Плотоядное/траваядное/всеядное
        Примеры:
        >>> Tiger = Animal(False, "Кошки", "Тигр", "Плотоядное")
        """
        если не экземпляр (статус, логическое значение):
            поднять TypeError("Статус животного должен быть типа bool")
        self.status = статус
        если не isinstance (королевство, улица):
            поднять TypeError("Название царства животного должно быть типа str")
        self.kingdom = королевство
        если не isinstance (имя, улица):
            поднять TypeError("Название животного должно быть типа str")
        self.name = имя
        если не isinstance (meal_category, str):
            поднять TypeError("Вид животного должен быть типа str")
        self.meal_category = еда_категория

    def  tame ( self , points : int ) ->  str :
        """
        Приручение животного
        :param points: Навряд ли хорошо у вас развиты навыки приручения
        :return: Приручилось ли животное
        Примеры:
        >>> Tiger = Animal(Верно, "Кошки", "Тигр", "Плотоядное")
        >>> тигр.ручной(10)
        """
        ...
        если  не  isinstance ( points , int ):
            поднять  TypeError ( "Число навыков приручения должно быть типа int" )
        если  10  <  точек  <  0 :
            поднять  ValueError ( "Число квалификации приручения должно быть от 0 до 10" )
        если  не  сам . статус :
            вернуть  f' { самостоятельно . имя } нельзя приручить'

    def  feed ( self , food : str ):
        """
        Кормление животных
        :param food: Еда, которая будет кормить
        Примеры:
        >>> Tiger = Animal(False, "Кошки", "Тигр", "Плотоядное")
        >>> tiger.feed('мясо')
        """
        ...
        если  не  isinstance ( food , str ):
            поднять  TypeError ( "Название пищи должно быть типа str" )
        если  еда  не  в  Animal . slovar_pishi [ сам . еда_категория ]:
            поднять  ValueError ( "Этой едой нельзя кормить"  f' { self . name } ' )


класс  Кухонный Техник :

    def  __init__ ( self , tech : dict , count_sits : int ):
        """
        Подготовка и создание объекта 'KitchenTech'
        :param tech: Техника на кухне (ключ: название, значение: id)
        :param count_sits: Число мест на кухне
        Примеры:
        """
        если  не  isinstance ( tech , dict ):
            поднять  TypeError ( "Техника должна быть зарегестрировна в видео словаря dict" )
        сам . технология  =  технология
        если  не  isinstance ( count_sits , int ):
            поднять  TypeError ( "Число мест на кухне должно быть типа int" )
        если  count_sits  <  0 :
            поднять  ValueError ( "Число мест на кухне должно быть неотрицательным" )
        сам . count_sits  =  количество_сидений

    def  stop_start_tech ( self , name : str ) ->  None :
        """
        Включение или отключение техники
        :param name: Название техники
        Примеры:
        """
        ...
        если  не  экземпляр ( имя , строка ):
            поднять  TypeError ( "Название техники должно быть типа str" )
        если  имя  не  в  себе . технология :
            поднять  ValueError ( "Такой техники нет на кухне" )

    def  приглашение_друга ( самостоятельно , количество_друзей : целое число ):
        """
        Приглашение людей в гости на кухню
        :param count_friends: Число приглашенных
        Примеры:
        """
        ...
        если  не  isinstance ( count_friends , int ):
            поднять  TypeError ( "Число приглашенных должно быть типа int" )
        если  count_friends  >  self . count_sits :
            поднять  ValueError ( "На кухне не достаточно места" )
        если  count_friends  <=  0 :
            поднять  ValueError ( "Число приглашенных должно быть принято" )

    def  clean ( сам , имя : ул ):
        """
        Чистка техники
        :param name: Название техники
        Примеры:
        """
        ...
        если  не  экземпляр ( имя , строка ):
            поднять  TypeError ( "Название техники должно быть типа str" )

        если  имя  не  в  себе . технология :
            поднять  ValueError ( "Такой техники нет на кухне" )


класс  Лего :

    def  __init__ ( self , count : int , Universe : str , length_object : float  =  0 , weight_object : float  =  0 ):
        """
        Подготовка и создание объекта 'Лего'
        :param count: Число блоков (деталей)
        :param Universe: К какой вселенной (тематике) подходит конструктор
        :param length_object: Длина собранного конструктора
        :param weight_object: Ширина собранного конструктора
        Примеры:
        """
        если  не  isinstance ( count , int ):
            поднять  TypeError ( "Число блоков должно быть типа int" )
        если  количество  <=  0 :
            поднять  ValueError ( "Число блоков должно быть рассмотрено" )
        сам . считать  =  считать
        если  не  isinstance ( юниверс , ул ):
            поднять  TypeError ( "Тема лего должна быть типа str" )
        сам . вселенная  =  вселенная
        если  не  isinstance ( length_object , float ):
            поднять  TypeError ( "Длина конструкции должна быть типа float" )
        если  length_object  <  0 :
            поднять  ValueError ( "Длина постройки должна быть неотрицательной" )
        сам . длина_объект  =  длина_объект
        если  не  isinstance ( weight_object , float ):
            поднять  TypeError ( "Ширина постройки должна быть типа float" )
        если  weight_object  <  0 :
            поднять  ValueError ( "Ширина постройки должна быть неотрицательной" )
        сам . объект_веса  =  объект_веса

    def  build ( self , length : float , weight : float ) ->  tuple :
        """
        Сборка конструктора
        :param length: Увеличение сбора сборки на длину
        :param weight: Увеличение увеличения сборки на вес
        :return: Кортеж повторного обнаружения и обнаружения
        Примеры:
        """
        ...
        если  не  isinstance ( длина , поплавок ):
            поднять  TypeError ( "Длина конструкции должна быть типа float" )
        если  длина  <=  0 :
            поднять  ValueError ( "Длина настройки должна быть положительной" )
        если  не  isinstance ( вес , поплавок ):
            поднять  TypeError ( "Ширина постройки должна быть типа float" )
        если  вес  <=  0 :
            поднять  ValueError ( "Ширина постройки должна быть положительной" )
        возврат ( self . length_object , self . weight_object )

    def  destroy ( self , length : float , weight : float ) ->  tuple :
        """
        Разборка конструктора
        :param length: Уменьшение сборки на длину
        :param weight: Уменьшение сборки достигается на вес
        :return: Кортеж повторного обнаружения и обнаружения
        """
        ...
        если  не  isinstance ( длина , поплавок ):
            поднять  TypeError ( "Длина разборки должна быть типа float" )
        если  длина  <=  0 :
            поднять  ValueError ( "Длина разборки должна быть положительной" )
        если  сам . length_object  <  длина :
            поднять  ValueError ( "Длина разборки должна быть меньше или равна собранной конструкции" )
        если  не  isinstance ( вес , поплавок ):
            поднять  TypeError ( "Ширина разборки должна быть типа float" )
        если  вес  <=  0 :
            поднять  ValueError ( "Ширина разборки должна быть положительной" )
        если  сам . weight_object  <  вес :
            поднять  ValueError ( "Ширина разборки должна быть меньше или равной собранной конструкции" )
        возврат ( self . length_object , self . weight_object )

    def  create_block ( self , add_count : int ) ->  None :
        """
        Создание/закупка новых блоков (деталей)
        :param add_count: Число новых блоков (деталей)
        Примеры:
        """
        сам . количество  +=  добавить_счетчик


если __name__ == '__main__':
    доктест . тестмод ()